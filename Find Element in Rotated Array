class Solution {
    public int findPivot(int arr[],int low,int high){
        if(low > high)
            return -1;
        else if (low == high)
            return low;
        int mid = (low+high)/2;
        if(mid<high && arr[mid]>arr[mid+1])
            return mid;
        else if (mid>low && arr[mid]<arr[mid-1])
            return mid-1;
        else if(arr[mid]>arr[low])
            return findPivot(arr,mid+1,high); 
        else return findPivot(arr,low,mid-1);
    }
    public int binarySearch(int arr[],int low,int high,int target){
        if(low>high)
            return -1;
        if(low==high && arr[low]==target)
            return low;
        int mid = (low+high)/2;
        if(arr[mid] == target)
            return mid;
        else if (arr[mid]>target)
            return binarySearch(arr,low,mid-1,target);
        else return binarySearch(arr,mid+1,high,target);
    }
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums,0,nums.length-1);
        if(pivot>-1){
            if(nums[pivot]==target)
                return pivot;
            else if (nums[0]<=target)
                return binarySearch(nums,0,pivot-1,target);
            else return binarySearch(nums,pivot+1,nums.length-1,target);
        }
        else return binarySearch(nums,0,nums.length-1,target);
    }
    
}
